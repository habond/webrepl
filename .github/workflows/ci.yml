name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test All Backends
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Verify Docker Compose
      run: |
        echo "=== Docker version ==="
        docker --version
        echo "=== Docker Compose version ==="
        docker compose version
        
    - name: Build and start services
      run: |
        echo "=== Starting all services ==="
        docker compose up --build -d
        echo "=== Waiting for services to initialize ==="
        sleep 45
        
    - name: Wait for services to be ready
      run: |
        echo "Waiting for services to start..."
        sleep 60
        echo "=== Container Status ==="
        docker compose ps
        echo "=== Testing frontend accessibility ==="
        timeout 30 bash -c 'until curl -s http://localhost:8080/ > /dev/null; do echo "Waiting for frontend..."; sleep 5; done' || true
        
    - name: Basic service health checks
      run: |
        echo "=== Running basic service health checks ==="
        # Simple curl tests to verify services are responding
        curl -f http://localhost:8080/ || echo "Frontend health check failed"
        
    - name: Show container logs on failure
      if: failure()
      run: |
        echo "=== Docker Compose Logs ==="
        docker compose logs
        echo "=== Container Status ==="
        docker compose ps
        
    - name: Cleanup
      if: always()
      run: |
        docker compose down -v
        
  frontend-test:
    name: Frontend Tests & Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      working-directory: frontend
      run: npm ci
      
    - name: Run TypeScript check
      working-directory: frontend
      run: |
        echo "=== TypeScript Version ==="
        npx tsc --version
        echo "=== Running TypeScript Check ==="
        npx tsc --noEmit --skipLibCheck
      
    - name: Run ESLint
      working-directory: frontend
      run: npm run lint
      
    - name: Build frontend
      working-directory: frontend
      run: npm run build
      
  backend-tests:
    name: Backend Test Suites
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Verify Docker Compose
      run: |
        echo "=== Docker version ==="
        docker --version
        echo "=== Docker Compose version ==="
        docker compose version
        
    - name: Run backend test suite
      working-directory: backend
      run: |
        echo "=== Running automated backend test suite ==="
        chmod +x test.sh
        ./test.sh
        
    - name: Show container logs on failure
      if: failure()
      working-directory: backend
      run: |
        echo "=== Checking for running containers ==="
        docker ps -a
        echo "=== Backend test logs ==="
        # Try to get logs from any test containers that might still be running
        for backend in bash javascript php; do
          if [ -d "$backend/tests" ]; then
            echo "=== $backend test logs ==="
            cd "$backend/tests" || continue
            docker compose logs || echo "No logs available for $backend"
            cd ..
          fi
        done

  python-backend-test:
    name: Python Backend Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      working-directory: backend/python
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt -r requirements-dev.txt
        
    - name: Check Python tools
      working-directory: backend/python
      run: |
        echo "=== Python Version ==="
        python --version
        echo "=== Pip Version ==="
        pip --version
        echo "=== Installed Packages ==="
        pip list | grep -E "(black|ruff|mypy)" || echo "Tools not found"
        
    - name: Run type checking
      working-directory: backend/python
      run: |
        echo "=== Running mypy ==="
        make type-check || echo "Type checking failed"
      
    - name: Run linting
      working-directory: backend/python
      run: |
        echo "=== Running linting ==="
        make lint || echo "Linting failed"
      
  docker-build-test:
    name: Docker Build Test
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        service: [frontend, backend-python, backend-javascript, backend-ruby, backend-php, backend-kotlin, backend-haskell, backend-bash, backend-perl, session-manager]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      run: |
        echo "=== Building ${{ matrix.service }} ==="
        docker compose build ${{ matrix.service }}
        
    - name: Test image runs
      run: |
        echo "=== Starting ${{ matrix.service }} ==="
        docker compose up -d ${{ matrix.service }}
        sleep 15
        echo "=== Container Status ==="
        docker compose ps ${{ matrix.service }}
        echo "=== Stopping services ==="
        docker compose down